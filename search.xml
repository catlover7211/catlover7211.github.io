<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Volatility Note</title>
      <link href="/2024/11/30/Volatility-Note/"/>
      <url>/2024/11/30/Volatility-Note/</url>
      
        <content type="html"><![CDATA[<h1 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h1><h2 id="1-簡介"><a href="#1-簡介" class="headerlink" title="1. 簡介"></a>1. 簡介</h2><p>Volatility是一個開源的內存取證框架,主要用於分析計算機的內存轉儲(memory dumps)。它能從這些內存轉儲中提取各種重要信息,對於資安分析、惡意軟件檢測和事件響應都非常有用。</p><h3 id="1-1-主要用途"><a href="#1-1-主要用途" class="headerlink" title="1.1 主要用途"></a>1.1 主要用途</h3><ul><li>惡意軟件分析</li><li>事件響應</li><li>數字取證調查</li><li>系統行為分析</li></ul><h2 id="2-安裝和設置"><a href="#2-安裝和設置" class="headerlink" title="2. 安裝和設置"></a>2. 安裝和設置</h2><h3 id="2-1-系統要求"><a href="#2-1-系統要求" class="headerlink" title="2.1 系統要求"></a>2.1 系統要求</h3><ul><li>支持Windows、Linux和macOS</li><li>Python環境(Volatility 2.x需要Python 2.7, Volatility 3需要Python 3.x)</li></ul><h3 id="2-2-安裝步驟"><a href="#2-2-安裝步驟" class="headerlink" title="2.2 安裝步驟"></a>2.2 安裝步驟</h3><ol><li>確保已安裝適當版本的Python</li><li>使用pip安裝Volatility:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install volatility3</span><br></pre></td></tr></table></figure></li><li>下載對應操作系統的符號表(symbol tables)</li></ol><h3 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h3><ul><li>設置VOLATILITY_LOCATION環境變量指向符號表位置</li><li>可選:配置插件目錄</li></ul><h2 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3. 基本使用"></a>3. 基本使用</h2><h3 id="3-1-命令格式"><a href="#3-1-命令格式" class="headerlink" title="3.1 命令格式"></a>3.1 命令格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; &lt;插件名稱&gt; [選項]</span><br></pre></td></tr></table></figure><h3 id="3-2-常用命令及用法"><a href="#3-2-常用命令及用法" class="headerlink" title="3.2 常用命令及用法"></a>3.2 常用命令及用法</h3><ol><li><p><code>imageinfo</code>: 識別內存轉儲的操作系統版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp imageinfo</span><br></pre></td></tr></table></figure><p>這個命令會顯示內存轉儲的操作系統信息,包括建議使用的profile。</p></li><li><p><code>pslist</code>: 列出所有進程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p>列出所有進程,包括PID、PPID、名稱、啟動時間等。</p></li><li><p><code>pstree</code>: 以樹狀結構顯示進程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 pstree</span><br></pre></td></tr></table></figure><p>以層級結構顯示進程,便於查看進程間的父子關係。</p></li><li><p><code>netscan</code>: 顯示網絡連接信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 netscan</span><br></pre></td></tr></table></figure><p>顯示所有活動的網絡連接,包括本地和遠程IP地址、端口等。</p></li><li><p><code>filescan</code>: 掃描文件對象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 filescan</span><br></pre></td></tr></table></figure><p>掃描內存中的所有文件對象,可用於查找特定文件。</p></li><li><p><code>malfind</code>: 檢測可能的惡意代碼注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 malfind</span><br></pre></td></tr></table></figure><p>搜索可能被注入惡意代碼的進程內存區域。</p></li><li><p><code>dlllist</code>: 列出每個進程加載的DLL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 dlllist -p 1234</span><br></pre></td></tr></table></figure><p>列出指定進程(PID 1234)加載的所有DLL。</p></li><li><p><code>hivelist</code>: 列出註冊表配置單元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 hivelist</span><br></pre></td></tr></table></figure><p>顯示所有註冊表配置單元及其虛擬地址。</p></li><li><p><code>printkey</code>: 打印註冊表鍵值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 printkey -K &quot;Software\Microsoft\Windows\CurrentVersion\Run&quot;</span><br></pre></td></tr></table></figure><p>打印指定註冊表鍵的內容。</p></li><li><p><code>cmdscan</code>: 掃描命令行歷史</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 cmdscan</span><br></pre></td></tr></table></figure><p>掃描並顯示命令提示符的歷史命令。</p></li><li><p><code>kdbgscan</code>: 掃描並定位內核調試數據塊</p></li></ol><h3 id="kdbgscan"><a href="#kdbgscan" class="headerlink" title="kdbgscan"></a>kdbgscan</h3><p><code>kdbgscan</code> 是 Volatility 中一個非常重要的命令，用於掃描內存轉儲文件以定位內核調試數據塊（Kernel Debugger Data Block，簡稱 KDBG）。這個命令對於確定正確的內存配置文件（profile）非常有用，特別是在 <code>imageinfo</code> 命令無法提供準確結果的情況下。</p><p>使用語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; kdbgscan</span><br></pre></td></tr></table></figure><p>功能和用途：</p><ul><li>掃描內存轉儲以找到所有可能的 KDBG 結構。</li><li>幫助確定正確的內存配置文件（profile）。</li><li>提供有關系統版本、架構和其他重要信息的線索。</li></ul><p>輸出信息包括：</p><ul><li>可能的 KDBG 結構的物理偏移量</li><li>匹配的配置文件建議</li><li>操作系統版本信息</li><li>PsActiveProcessHead 和 PsLoadedModuleList 的地址</li></ul><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp kdbgscan</span><br></pre></td></tr></table></figure><p>注意事項：</p><ol><li><code>kdbgscan</code> 可能會返回多個結果，需要分析師根據其他信息（如時間戳、版本號等）來判斷哪個是正確的。</li><li>在使用其他 Volatility 命令之前，先運行 <code>kdbgscan</code> 可以幫助確保使用正確的配置文件。</li></ol><p>使用技巧：</p><ol><li>結合 <code>imageinfo</code> 命令的結果來交叉驗證。</li><li>如果 <code>kdbgscan</code> 返回多個結果，可以使用 <code>--profile</code> 選項來測試每個建議的配置文件。</li><li>在分析不熟悉的系統或不確定的內存轉儲時，<code>kdbgscan</code> 是一個很好的起點。</li></ol><p>⠀<br>12. <code>hashdump</code>: 提取系統用戶密碼哈希</p><h3 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h3><p><code>hashdump</code> 命令用於從內存轉儲中提取系統用戶的密碼哈希。這個命令對於安全分析和取證調查非常有價值，但使用時需要謹慎，因為它涉及敏感信息。</p><p>使用語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; --profile=&lt;配置文件&gt; hashdump</span><br></pre></td></tr></table></figure><p>功能和用途：</p><ul><li>從內存中提取 Windows 系統用戶的密碼哈希。</li><li>提供用戶名和對應的 NTLM 哈希值。</li><li>可用於進一步的密碼分析或破解（僅限合法和授權的情況下）。</li></ul><p>輸出格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用戶名:RID:LM哈希:NT哈希</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 hashdump</span><br></pre></td></tr></table></figure><p>注意事項：</p><ol><li>使用 <code>hashdump</code> 需要管理員權限或等效的訪問級別。</li><li>此命令僅適用於 Windows 系統的內存轉儲。</li><li>某些反病毒軟件可能會將使用此命令視為惡意行為。</li><li>在某些情況下，可能無法提取所有用戶的哈希值。</li></ol><p>使用技巧：</p><ol><li><p>在使用 <code>hashdump</code> 之前，確保已經使用 <code>imageinfo</code> 或 <code>kdbgscan</code> 確定了正確的配置文件。</p></li><li><p>結合 <code>hivelist</code> 命令使用，可以手動指定 SYSTEM 和 SAM 配置單元的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 hashdump -y 0x8781c008 -s 0x87f72008</span><br></pre></td></tr></table></figure><p>其中，<code>-y</code> 指定 SYSTEM 配置單元地址，<code>-s</code> 指定 SAM 配置單元地址。</p></li><li><p>提取的哈希可以用於離線密碼審計，但請確保您有合法授權。</p></li></ol><p>法律和道德考慮：</p><ul><li>只在您有明確授權的系統上使用此命令。</li><li>遵守所有適用的法律、法規和道德準則。</li><li>保護提取的敏感信息，避免未經授權的訪問或濫用。</li></ul><p>替代方法：</p><ul><li>對於較新的 Windows 版本，可能需要使用 <code>lsadump</code> 插件來提取密碼信息。</li></ul><p>⠀<br>13. <code>vadinfo</code>: 顯示虛擬地址描述符信息</p><h3 id="vadinfo"><a href="#vadinfo" class="headerlink" title="vadinfo"></a>vadinfo</h3><p><code>vadinfo</code> 命令用於顯示進程的虛擬地址描述符（VAD）樹信息。VAD 是 Windows 操作系統用來描述進程虛擬地址空間的數據結構，對於理解進程的內存佈局和特徵非常重要。</p><p>使用語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; --profile=&lt;配置文件&gt; vadinfo [-p &lt;進程ID&gt;]</span><br></pre></td></tr></table></figure><p>功能和用途：</p><ul><li>顯示進程的虛擬內存區域信息</li><li>幫助分析進程的內存使用情況</li><li>識別可能的惡意行為，如隱藏的代碼注入</li></ul><p>輸出信息包括：</p><ul><li>VAD 節點地址</li><li>起始和結束虛擬地址</li><li>內存保護標誌（如讀、寫、執行權限）</li><li>控制標誌</li><li>文件對象信息（如果 VAD 映射了文件）</li></ul><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 vadinfo -p 4</span><br></pre></td></tr></table></figure><p>這會顯示 PID 為 4 的進程的 VAD 信息。</p><p>注意事項：</p><ol><li>如果不指定 <code>-p</code> 參數，<code>vadinfo</code> 會顯示所有進程的 VAD 信息，這可能會產生大量輸出。</li><li>VAD 樹的分析可以揭示進程的內存使用模式，有助於識別異常行為。</li></ol><p>使用技巧：</p><ol><li>結合 <code>pslist</code> 或 <code>psscan</code> 命令來確定感興趣的進程 ID。</li><li>關注具有執行權限的內存區域，特別是那些沒有關聯文件的區域，它們可能指示代碼注入。</li><li>檢查具有unusual大小或權限的內存區域，這可能暗示惡意活動。</li></ol><p>高級用法：</p><ol><li>使用 <code>-o</code> 選項指定特定的偏移量來分析單個 VAD 節點：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 vadinfo -o 0x12345678</span><br></pre></td></tr></table></figure></li><li>結合 <code>malfind</code> 插件使用，可以更有效地檢測可能的惡意代碼注入。</li></ol><p>相關命令：</p><ul><li><code>vaddump</code>: 轉儲 VAD 區域的內容</li><li><code>vadtree</code>: 以樹狀結構顯示進程的 VAD 節點</li></ul><p> ⠀<br>14. <code>cmdline</code> vs <code>cmdscan</code>: 命令行分析比較</p><p>Volatility 提供了兩個與命令行相關的命令：<code>cmdline</code> 和 <code>cmdscan</code>。雖然它們看起來相似，但它們的功能和用途有所不同。</p><h3 id="cmdline"><a href="#cmdline" class="headerlink" title="cmdline"></a>cmdline</h3><p>用途：顯示進程的命令行參數。</p><p>語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; --profile=&lt;配置文件&gt; cmdline</span><br></pre></td></tr></table></figure><p>特點：</p><ul><li>顯示所有進程的命令行參數</li><li>包括進程 ID、進程名稱和完整的命令行</li><li>適用於查看進程是如何被啟動的</li></ul><p>示例輸出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Process: 788 - cmd.exe</span><br><span class="line">Command line: &quot;C:\Windows\system32\cmd.exe&quot;</span><br></pre></td></tr></table></figure><h3 id="cmdscan"><a href="#cmdscan" class="headerlink" title="cmdscan"></a>cmdscan</h3><p>用途：掃描並顯示命令提示符（cmd.exe）的命令歷史。</p><p>語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; --profile=&lt;配置文件&gt; cmdscan</span><br></pre></td></tr></table></figure><p>特點：</p><ul><li>專門用於查找和顯示命令提示符中執行過的命令</li><li>可以恢復已關閉的命令提示符窗口中的命令</li><li>提供更詳細的命令執行歷史信息</li></ul><p>示例輸出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">CommandProcess: csrss.exe Pid: 528</span><br><span class="line">CommandHistory: 0x2713b0 Application: cmd.exe Flags: Allocated, Reset</span><br><span class="line">CommandCount: 2 LastAdded: 1 LastDisplayed: 1</span><br><span class="line">FirstCommand: 0 CommandCountMax: 50</span><br><span class="line">ProcessHandle: 0x5c</span><br><span class="line">Cmd #0 @ 0x271410: dir</span><br><span class="line">Cmd #1 @ 0x2714f0: ipconfig</span><br></pre></td></tr></table></figure><p>主要區別：</p><ol><li><p>範圍：</p><ul><li><code>cmdline</code> 顯示所有進程的啟動命令行</li><li><code>cmdscan</code> 僅關注命令提示符（cmd.exe）的命令歷史</li></ul></li><li><p>信息深度：</p><ul><li><code>cmdline</code> 提供進程啟動時的參數信息</li><li><code>cmdscan</code> 提供更詳細的命令執行歷史，包括已關閉的命令提示符窗口</li></ul></li><li><p>用途：</p><ul><li><code>cmdline</code> 適用於了解進程如何被啟動及其參數</li><li><code>cmdscan</code> 適用於調查用戶在命令提示符中執行的操作</li></ul></li></ol><p>使用建議：</p><ul><li>使用 <code>cmdline</code> 來快速查看所有進程的啟動參數</li><li>使用 <code>cmdscan</code> 進行深入的命令行歷史調查，特別是在懷疑有可疑命令執行時</li></ul><p>注意事項：</p><ul><li><code>cmdscan</code> 可能會受到某些反取證技術的影響</li><li>兩個命令都應結合其他 Volatility 插件使用，以獲得更全面的分析結果<br> ⠀</li></ul><ol start="15"><li><code>shimcache</code>: 分析ShimCache數據</li></ol><p>ShimCache（應用程序兼容性緩存）是Windows操作系統中的一個功能，用於跟踪應用程序的執行情況以提高兼容性。從取證的角度來看，ShimCache是一個寶貴的信息來源，可以提供有關系統上執行過的程序的洞察。</p><h3 id="ShimCache概述"><a href="#ShimCache概述" class="headerlink" title="ShimCache概述"></a>ShimCache概述</h3><ul><li>目的：記錄應用程序執行信息，以改善兼容性</li><li>位置：存儲在註冊表中（HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\AppCompatCache）</li><li>包含信息：文件路徑、文件大小、最後修改時間等</li></ul><h3 id="Volatility中的shimcache命令"><a href="#Volatility中的shimcache命令" class="headerlink" title="Volatility中的shimcache命令"></a>Volatility中的<code>shimcache</code>命令</h3><p>用途：從內存轉儲中提取和分析ShimCache數據。</p><p>語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; --profile=&lt;配置文件&gt; shimcache</span><br></pre></td></tr></table></figure><p>功能：</p><ul><li>提取ShimCache中存儲的程序執行記錄</li><li>顯示文件路徑、最後修改時間等信息</li><li>幫助重建系統活動的時間線</li></ul><p>示例輸出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Last Modified                  Path</span><br><span class="line">2023-07-11 14:30:22 UTC+0000   \??\C:\Windows\system32\calc.exe</span><br><span class="line">2023-07-11 15:45:10 UTC+0000   \??\C:\Users\Admin\Downloads\tool.exe</span><br></pre></td></tr></table></figure><p>使用價值：</p><ol><li>程序執行歷史：識別系統上運行過的程序</li><li>時間線分析：了解程序執行的時間順序</li><li>惡意軟件調查：發現可疑或異常的程序執行</li><li>用戶活動分析：了解用戶的程序使用模式</li></ol><p>注意事項：</p><ul><li>ShimCache不提供程序的確切執行時間，只有最後修改時間</li><li>數據可能會被反取證技術修改或清除</li><li>不同Windows版本的ShimCache結構可能有所不同</li></ul><p>高級用法：</p><ol><li><p>結合<code>timeline</code>插件創建更全面的系統活動時間線：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 shimcache --output=body --output-file=shimcache.body</span><br><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 timeliner --output=body --output-file=timeliner.body</span><br><span class="line">cat shimcache.body timeliner.body | sort &gt; full_timeline.body</span><br></pre></td></tr></table></figure></li><li><p>與其他Volatility插件（如<code>cmdline</code>、<code>pslist</code>）結合使用，交叉驗證程序執行信息</p></li></ol><p>最佳實踐：</p><ul><li>將ShimCache數據與其他證據源（如Prefetch文件、UserAssist註冊表項）結合分析</li><li>使用時間線工具（如log2timeline）整合ShimCache數據，創建全面的系統活動視圖</li></ul><ol start="16"><li><code>memdump</code>: 提取進程的完整內存</li></ol><h3 id="memdump"><a href="#memdump" class="headerlink" title="memdump"></a>memdump</h3><p><code>memdump</code> 是 Volatility 中一個強大的命令，用於從內存轉儲中提取特定進程的完整內存內容。這對於深入分析個別進程，特別是在惡意軟件調查中，非常有價值。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; --profile=&lt;配置文件&gt; memdump -p &lt;進程ID&gt; --dump-dir=&lt;輸出目錄&gt;</span><br></pre></td></tr></table></figure><p>功能：</p><ul><li>提取指定進程的完整內存內容</li><li>將提取的內存保存為單獨的文件</li><li>允許進一步的離線分析</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 memdump -p 1234 --dump-dir=/path/to/output</span><br></pre></td></tr></table></figure><p>這會將 PID 為 1234 的進程的內存轉儲到指定目錄。</p><h4 id="輸出"><a href="#輸出" class="headerlink" title="輸出"></a>輸出</h4><ul><li>輸出文件名格式：<code>pid.dmp</code>（例如：<code>1234.dmp</code>）</li><li>文件包含進程的完整內存映像</li></ul><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ol><li>惡意軟件分析：提取可疑進程的內存以進行深入檢查</li><li>取證調查：分析特定應用程序的運行時狀態</li><li>內存結構研究：研究進程的內存佈局和內容</li><li>數據恢復：從進程內存中恢復可能已經從磁盤刪除的數據</li></ol><h4 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h4><ol><li>輸出文件可能會很大，確保有足夠的磁盤空間</li><li>處理提取的內存時要小心，特別是對於可能包含惡意代碼的進程</li><li>某些反病毒軟件可能會對提取的內存文件產生警報</li></ol><h4 id="高級用法"><a href="#高級用法" class="headerlink" title="高級用法"></a>高級用法</h4><ol><li><p>結合 <code>pslist</code> 或 <code>psscan</code> 來識別感興趣的進程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 pslist</span><br><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 memdump -p &lt;identified_pid&gt; --dump-dir=/path/to/output</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>strings</code> 命令快速查看提取的內存內容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /path/to/output/1234.dmp | grep &quot;interesting_string&quot;</span><br></pre></td></tr></table></figure></li><li><p>使用專門的內存分析工具（如 Rekall 或 Volatility 本身）進一步分析提取的內存</p></li></ol><h4 id="最佳實踐"><a href="#最佳實踐" class="headerlink" title="最佳實踐"></a>最佳實踐</h4><ol><li>在隔離的環境中分析提取的內存文件</li><li>保持提取的文件的完整性，避免修改原始數據</li><li>記錄所有的分析步驟，確保調查的可重現性</li><li>考慮使用 <code>malfind</code> 插件來識別可能的惡意注入，然後使用 <code>memdump</code> 提取相關進程</li></ol><h4 id="相關命令"><a href="#相關命令" class="headerlink" title="相關命令"></a>相關命令</h4><ul><li><code>procmemdump</code>：類似於 <code>memdump</code>，但輸出格式略有不同</li><li><code>dlldump</code>：轉儲進程加載的特定 DLL</li><li><code>vaddump</code>：轉儲特定的內存區域（VAD）<br>⠀</li></ul><ol start="17"><li><code>mftparser</code>: 分析 NTFS 主文件表 (MFT)</li></ol><h3 id="mftparser"><a href="#mftparser" class="headerlink" title="mftparser"></a>mftparser</h3><p><code>mftparser</code> 是 Volatility 中的一個高級插件，用於解析和分析 Windows NTFS 文件系統的主文件表（Master File Table, MFT）。MFT 是 NTFS 文件系統的核心組件，包含了關於文件和目錄的元數據信息。</p><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; --profile=&lt;配置文件&gt; mftparser</span><br></pre></td></tr></table></figure><p>功能：</p><ul><li>從內存中提取和解析 MFT 條目</li><li>提供詳細的文件和目錄信息</li><li>有助於恢復已刪除的文件信息</li></ul><h4 id="輸出信息"><a href="#輸出信息" class="headerlink" title="輸出信息"></a>輸出信息</h4><p>MFTParser 的輸出通常包括：</p><ul><li>文件名和路徑</li><li>文件大小</li><li>創建、修改、訪問時間</li><li>文件屬性</li><li>父目錄信息</li><li>數據運行（如果可用）</li></ul><h4 id="使用場景"><a href="#使用場景" class="headerlink" title="使用場景"></a>使用場景</h4><ol><li>文件系統分析：了解系統上的文件結構和布局</li><li>數據恢復：尋找已刪除或隱藏的文件痕跡</li><li>時間線分析：重建文件系統活動的時間線</li><li>惡意軟件調查：識別可疑文件和它們的位置</li></ol><h4 id="高級用法-1"><a href="#高級用法-1" class="headerlink" title="高級用法"></a>高級用法</h4><ol><li><p>結合輸出重定向以便後續分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 mftparser &gt; mft_output.txt</span><br></pre></td></tr></table></figure></li><li><p>使用 grep 或其他文本處理工具進行快速搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat mft_output.txt | grep &quot;suspicious_file.exe&quot;</span><br></pre></td></tr></table></figure></li><li><p>與其他 Volatility 插件結合使用，如 <code>filescan</code> 或 <code>timeliner</code></p></li></ol><h4 id="注意事項-1"><a href="#注意事項-1" class="headerlink" title="注意事項"></a>注意事項</h4><ol><li>MFTParser 可能會生成大量輸出，處理時需要耐心</li><li>並非所有 MFT 條目都能被完整恢復或解析</li><li>解析結果的準確性取決於內存轉儲的完整性和系統狀態</li></ol><h4 id="最佳實踐-1"><a href="#最佳實踐-1" class="headerlink" title="最佳實踐"></a>最佳實踐</h4><ol><li>在分析之前，確保使用正確的系統配置文件</li><li>結合其他文件系統分析工具來驗證和補充 MFTParser 的結果</li><li>創建輸出的備份，以便進行離線分析和長期保存</li><li>使用時間過濾器來聚焦於特定時間範圍內的文件活動</li></ol><h4 id="相關命令-1"><a href="#相關命令-1" class="headerlink" title="相關命令"></a>相關命令</h4><ul><li><code>filescan</code>: 掃描內存中的文件對象</li><li><code>dumpfiles</code>: 從內存中提取文件</li><li><code>timeliner</code>: 創建系統事件的時間線，可以包括 MFT 信息</li></ul><h3 id="3-3-輸出結果處理"><a href="#3-3-輸出結果處理" class="headerlink" title="3.3 輸出結果處理"></a>3.3 輸出結果處理</h3><p>大多數Volatility命令的輸出可以被重定向到文件中,便於後續分析:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 pslist &gt; pslist_output.txt</span><br></pre></td></tr></table></figure><p>某些插件還支持以其他格式輸出,如CSV:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 pslist --output=csv --output-file=pslist_output.csv</span><br></pre></td></tr></table></figure><h3 id="3-4-使用過濾器"><a href="#3-4-使用過濾器" class="headerlink" title="3.4 使用過濾器"></a>3.4 使用過濾器</h3><p>許多插件支持使用過濾器來精確定位感興趣的信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 dlllist -p 1234 | grep &quot;system32&quot;</span><br></pre></td></tr></table></figure><p>這條命令會列出PID為1234的進程加載的DLL,並只顯示包含”system32”的行。</p><h2 id="4-高級功能"><a href="#4-高級功能" class="headerlink" title="4. 高級功能"></a>4. 高級功能</h2><h3 id="4-1-時間線分析"><a href="#4-1-時間線分析" class="headerlink" title="4.1 時間線分析"></a>4.1 時間線分析</h3><p>使用<code>timeliner</code>插件創建系統事件時間線。</p><h3 id="4-2-內存取證"><a href="#4-2-內存取證" class="headerlink" title="4.2 內存取證"></a>4.2 內存取證</h3><ul><li><code>memdump</code>: 轉儲特定進程的完整內存</li><li><code>procdump</code>: 轉儲進程的可執行文件</li><li><code>procdump</code>: 轉儲進程的可執行文件</li></ul><h4 id="procdump-轉儲進程的可執行文件"><a href="#procdump-轉儲進程的可執行文件" class="headerlink" title="procdump: 轉儲進程的可執行文件"></a>procdump: 轉儲進程的可執行文件</h4><p>使用語法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;內存轉儲文件&gt; --profile=&lt;配置文件&gt; procdump -p &lt;PID&gt; --dump-dir=&lt;輸出目錄&gt;</span><br></pre></td></tr></table></figure><p>參數說明:</p><ul><li><code>-f &lt;內存轉儲文件&gt;</code>: 指定要分析的內存轉儲文件。</li><li><code>--profile=&lt;配置文件&gt;</code>: 指定適合的配置文件（如 Win7SP1x64）。</li><li><code>-p &lt;PID&gt;</code>: 指定要轉儲的進程 ID。</li><li><code>--dump-dir=&lt;輸出目錄&gt;</code>: 指定保存提取文件的目錄。</li></ul><p>使用示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 procdump -p 1234 --dump-dir=/tmp/extracted_exe</span><br></pre></td></tr></table></figure><p>這個命令會將 PID 為 1234 的進程的可執行文件提取到 <code>/tmp/extracted_exe</code> 目錄中。</p><p>注意事項:</p><ol><li>確保指定的輸出目錄存在且有寫入權限。</li><li>提取的文件名格式通常為 <code>executable.&lt;PID&gt;.exe</code>。</li><li>如果不指定 PID，Volatility 會嘗試轉儲所有進程的可執行文件。</li><li>對於某些進程（如系統進程），可能無法成功提取可執行文件。</li></ol><p>使用技巧:</p><ol><li>結合 <code>pslist</code> 或 <code>pstree</code> 命令先識別可疑進程的 PID。</li><li>使用 <code>--unsafe</code> 選項可以嘗試從可能已經終止的進程中提取可執行文件。</li><li>提取後的文件可以使用其他工具（如 IDA Pro 或 Ghidra）進行進一步的靜態分析。</li></ol><h5 id="–dump-dir-選項的詳細說明"><a href="#–dump-dir-選項的詳細說明" class="headerlink" title="–dump-dir 選項的詳細說明"></a>–dump-dir 選項的詳細說明</h5><p><code>--dump-dir</code> 選項用於指定 Volatility 保存提取文件的目錄。這個選項在使用 <code>procdump</code> 以及其他需要輸出文件的命令時非常重要。</p><p>詳細說明：</p><ol><li><p>語法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--dump-dir=&lt;輸出目錄路徑&gt;</span><br></pre></td></tr></table></figure></li><li><p>用途：</p><ul><li>指定 Volatility 保存提取文件的目標目錄。</li><li>確保提取的文件被保存在一個已知和可訪問的位置。</li></ul></li><li><p>注意事項：</p><ul><li>指定的目錄必須已經存在。Volatility 不會自動創建不存在的目錄。</li><li>確保指定目錄有足夠的寫入權限。</li><li>使用絕對路徑可以避免混淆。</li><li>在 Windows 系統上，路徑中使用反斜線（\）；在 Unix&#x2F;Linux 系統上，使用正斜線（&#x2F;）。</li></ul></li><li><p>示例：</p><ul><li>在 Linux&#x2F;macOS 上：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 procdump -p 1234 --dump-dir=/home/user/volatility_output</span><br></pre></td></tr></table></figure></li><li>在 Windows 上：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 procdump -p 1234 --dump-dir=C:\Users\YourUsername\Desktop\volatility_output</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最佳實踐：</p><ul><li>為每次分析創建一個新的、唯一的輸出目錄，以避免文件覆蓋或混淆。</li><li>在目錄名中包含日期或案例標識符，例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--dump-dir=/cases/case001_2023-07-11/procdump_output</span><br></pre></td></tr></table></figure></li><li>如果在同一目錄中運行多個命令，考慮為每個命令創建子目錄：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--dump-dir=/cases/case001/procdump_output</span><br><span class="line">--dump-dir=/cases/case001/memdump_output</span><br></pre></td></tr></table></figure></li></ul></li><li><p>故障排除：</p><ul><li>如果遇到權限錯誤，檢查目錄的寫入權限。</li><li>如果文件沒有被保存，確認指定的目錄路徑是否正確，以及目錄是否存在。</li></ul></li><li><p>與其他命令的使用：<br><code>--dump-dir</code> 選項不僅適用於 <code>procdump</code>，還可以用於其他需要輸出文件的 Volatility 命令，如 <code>memdump</code>、<code>dlldump</code> 等。</p></li></ol><h3 id="Win10-hash-tool"><a href="#Win10-hash-tool" class="headerlink" title="Win10 hash tool"></a>Win10 hash tool</h3><h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile  &lt;檔名&gt;  &lt;hash型別&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-惡意軟件分析"><a href="#4-3-惡意軟件分析" class="headerlink" title="4.3 惡意軟件分析"></a>4.3 惡意軟件分析</h3><ul><li><code>malfind</code>: 檢測代碼注入</li><li><code>svcscan</code>: 掃描服務</li><li><code>ldrmodules</code>: 檢測隱藏的DLL</li></ul><h3 id="4-4-網絡分析"><a href="#4-4-網絡分析" class="headerlink" title="4.4 網絡分析"></a>4.4 網絡分析</h3><ul><li><code>netscan</code>: 掃描網絡連接和套接字</li><li><code>connscan</code>: 掃描TCP連接</li></ul><h3 id="4-5-字符串提取和字節序（Endianness）"><a href="#4-5-字符串提取和字節序（Endianness）" class="headerlink" title="4.5 字符串提取和字節序（Endianness）"></a>4.5 字符串提取和字節序（Endianness）</h3><p>在分析內存轉儲文件時，了解字符串提取和字節序的概念非常重要，特別是當處理不同類型的數據和文件格式時。</p><h4 id="字符串提取"><a href="#字符串提取" class="headerlink" title="字符串提取"></a>字符串提取</h4><p><code>strings</code> 命令是一個常用的工具，用於從二進制文件中提取可打印的字符序列。在內存取證中，它常用於快速查看內存轉儲文件的內容。</p><p>基本用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings &lt;文件名&gt;</span><br></pre></td></tr></table></figure><h4 id="字節序（Endianness）"><a href="#字節序（Endianness）" class="headerlink" title="字節序（Endianness）"></a>字節序（Endianness）</h4><p>字節序指的是計算機如何儲存多字節數據類型（如整數或字符串）的順序。</p><ol><li>大端序（Big Endian）：最高有效字節存儲在最低的內存地址。</li><li>小端序（Little Endian）：最低有效字節存儲在最低的內存地址。</li></ol><h4 id="“strings-e-l”-的含義"><a href="#“strings-e-l”-的含義" class="headerlink" title="“strings -e l” 的含義"></a>“strings -e l” 的含義</h4><p>當使用 <code>&quot;strings -e l&quot;</code> 命令時：</p><ul><li><code>-e</code> 選項指定字節序</li><li><code>l</code> 表示 little-endian（小端序）</li></ul><p>這個命令用於從按小端序存儲的數據中提取字符串。</p><h4 id="為什麼對記事本文件使用小端序？"><a href="#為什麼對記事本文件使用小端序？" class="headerlink" title="為什麼對記事本文件使用小端序？"></a>為什麼對記事本文件使用小端序？</h4><p>Windows 操作系統中的許多應用程序，包括記事本（Notepad），通常使用 UTF-16LE（Little Endian）編碼來存儲 Unicode 文本。這意味著：</p><ol><li>每個字符使用兩個字節表示。</li><li>這兩個字節按小端序排列。</li></ol><p>例如，字符 “A” 在內存中的表示：</p><ul><li>UTF-16LE：<code>41 00</code></li><li>UTF-16BE：<code>00 41</code></li></ul><h4 id="在內存分析中的應用"><a href="#在內存分析中的應用" class="headerlink" title="在內存分析中的應用"></a>在內存分析中的應用</h4><ol><li><p>分析 Windows 進程內存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings -e l &lt;memdump文件&gt; | grep &quot;關鍵詞&quot;</span><br></pre></td></tr></table></figure></li><li><p>提取可能的文本內容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory.dmp --profile=Win7SP1x64 memdump -p &lt;記事本進程ID&gt; --dump-dir=/output</span><br><span class="line">strings -e l /output/&lt;PID&gt;.dmp &gt; extracted_text.txt</span><br></pre></td></tr></table></figure></li><li><p>跨平台分析：</p><ul><li>對於 Linux 或 macOS 系統，可能需要使用 <code>-e b</code>（大端序）</li><li>某些文件格式可能混合使用大小端序</li></ul></li></ol><h4 id="注意事項-2"><a href="#注意事項-2" class="headerlink" title="注意事項"></a>注意事項</h4><ol><li>並非所有文本都是 UTF-16LE 編碼，某些可能是 UTF-8 或其他編碼。</li><li>在分析未知來源的數據時，嘗試不同的字節序和編碼可能會有所幫助。</li><li>某些工具（如高級文本編輯器）可以自動檢測和處理不同的字節序。</li></ol><h4 id="最佳實踐-2"><a href="#最佳實踐-2" class="headerlink" title="最佳實踐"></a>最佳實踐</h4><ol><li>了解目標系統和應用程序通常使用的編碼和字節序。</li><li>在分析過程中，嘗試使用不同的字節序選項（<code>-e l</code>, <code>-e b</code>, <code>-e s</code>）。</li><li>結合使用其他 Volatility 插件（如 <code>filescan</code>, <code>dumpfiles</code>）來定位和提取感興趣的文件。</li></ol><h2 id="5-Volatility-的工作原理"><a href="#5-Volatility-的工作原理" class="headerlink" title="5. Volatility 的工作原理"></a>5. Volatility 的工作原理</h2><p>Volatility 是一個強大的內存取證框架，其工作原理涉及多個關鍵概念和技術。理解這些原理有助於更有效地使用該工具並解釋其結果。</p><h3 id="5-1-基本原理"><a href="#5-1-基本原理" class="headerlink" title="5.1 基本原理"></a>5.1 基本原理</h3><ol><li><p>內存結構分析：</p><ul><li>Volatility 通過分析內存轉儲文件中的數據結構來重建系統狀態。</li><li>它利用操作系統特定的內存佈局和數據結構知識來定位和解釋信息。</li></ul></li><li><p>配置文件（Profiles）：</p><ul><li>Volatility 使用配置文件來定義特定操作系統版本的內存結構。</li><li>這些配置文件包含了內核數據結構的定義、重要內存地址等信息。</li></ul></li><li><p>地址空間抽象：</p><ul><li>Volatility 創建一個抽象的地址空間，允許它像操作系統一樣訪問內存。</li><li>這種抽象使得 Volatility 可以處理不同格式的內存轉儲文件。</li></ul></li></ol><h3 id="5-2-關鍵技術"><a href="#5-2-關鍵技術" class="headerlink" title="5.2 關鍵技術"></a>5.2 關鍵技術</h3><ol><li><p>符號解析：</p><ul><li>Volatility 使用調試符號信息來定位和解釋內核數據結構。</li><li>這允許它準確地映射內存中的對象和數據。</li></ul></li><li><p>對象遍歷：</p><ul><li>通過遍歷內存中的對象鏈表和樹結構，Volatility 可以重建進程列表、文件句柄等信息。</li></ul></li><li><p>啟發式掃描：</p><ul><li>對於某些情況（如隱藏進程），Volatility 使用啟發式方法來掃描內存，尋找特定的數據模式。</li></ul></li><li><p>插件架構：</p><ul><li>Volatility 的模塊化設計允許開發者創建自定義插件，擴展其功能。</li></ul></li></ol><h3 id="5-3-工作流程"><a href="#5-3-工作流程" class="headerlink" title="5.3 工作流程"></a>5.3 工作流程</h3><ol><li><p>內存轉儲文件加載：</p><ul><li>Volatility 讀取內存轉儲文件，創建虛擬地址空間。</li></ul></li><li><p>操作系統識別：</p><ul><li>使用如 <code>imageinfo</code> 或 <code>kdbgscan</code> 等命令來確定適當的配置文件。</li></ul></li><li><p>配置文件應用：</p><ul><li>將選定的配置文件應用於內存轉儲，建立內存結構映射。</li></ul></li><li><p>插件執行：</p><ul><li>用戶選擇的插件在映射的內存上執行，提取和分析特定信息。</li></ul></li><li><p>結果輸出：</p><ul><li>分析結果被格式化並呈現給用戶。</li></ul></li></ol><h3 id="5-4-關鍵優勢"><a href="#5-4-關鍵優勢" class="headerlink" title="5.4 關鍵優勢"></a>5.4 關鍵優勢</h3><ol><li><p>跨平台兼容性：</p><ul><li>Volatility 可以在不同的操作系統上運行，分析各種格式的內存轉儲。</li></ul></li><li><p>非侵入性分析：</p><ul><li>對原始內存轉儲進行分析，不會改變原始證據。</li></ul></li><li><p>可擴展性：</p><ul><li>插件架構允許社區貢獻和定制分析功能。</li></ul></li><li><p>深度分析能力：</p><ul><li>能夠提取和分析操作系統內部的深層數據結構。</li></ul></li></ol><h3 id="5-5-限制和挑戰"><a href="#5-5-限制和挑戰" class="headerlink" title="5.5 限制和挑戰"></a>5.5 限制和挑戰</h3><ol><li><p>依賴準確的配置文件：</p><ul><li>錯誤的配置文件選擇可能導致分析錯誤或失敗。</li></ul></li><li><p>對抗技術：</p><ul><li>某些高級惡意軟件可能會使用反取證技術來混淆內存內容。</li></ul></li><li><p>大型內存轉儲的處理：</p><ul><li>分析大型內存轉儲可能需要大量的計算資源和時間。</li></ul></li><li><p>動態性：</p><ul><li>內存內容是高度動態的，某些短暫的信息可能在轉儲時已經丟失。</li></ul></li></ol><p>理解這些原理有助於更有效地使用 Volatility，並正確解釋其輸出結果。同時，這也有助於在遇到複雜情況時進行故障排除和高級分析。</p><h2 id="6-記憶體的構造邏輯"><a href="#6-記憶體的構造邏輯" class="headerlink" title="6. 記憶體的構造邏輯"></a>6. 記憶體的構造邏輯</h2><p>理解記憶體的構造邏輯對於深入掌握 Volatility 等內存分析工具的工作原理至關重要。計算機內存是一個複雜的系統，其構造涉及多個層次和概念。</p><h3 id="6-1-物理內存-vs-虛擬內存"><a href="#6-1-物理內存-vs-虛擬內存" class="headerlink" title="6.1 物理內存 vs 虛擬內存"></a>6.1 物理內存 vs 虛擬內存</h3><ol><li><p>物理內存：</p><ul><li>直接對應到硬件 RAM 芯片</li><li>由操作系統管理，應用程序通常不直接訪問</li></ul></li><li><p>虛擬內存：</p><ul><li>每個進程都有自己的虛擬地址空間</li><li>操作系統負責將虛擬地址映射到物理地址</li></ul></li></ol><h3 id="6-2-內存分頁"><a href="#6-2-內存分頁" class="headerlink" title="6.2 內存分頁"></a>6.2 內存分頁</h3><ul><li>內存被分割成固定大小的”頁”（通常是 4KB）</li><li>使用頁表將虛擬頁面映射到物理頁面</li><li>允許非連續的物理內存看起來像是連續的虛擬內存</li></ul><h3 id="6-3-內存佈局"><a href="#6-3-內存佈局" class="headerlink" title="6.3 內存佈局"></a>6.3 內存佈局</h3><ol><li><p>內核空間：</p><ul><li>通常位於高地址區域</li><li>存儲操作系統內核、驅動程序等</li></ul></li><li><p>用戶空間：</p><ul><li>通常位於低地址區域</li><li>存儲應用程序代碼和數據</li></ul></li><li><p>典型的進程內存佈局：</p><ul><li>代碼段（Text）</li><li>數據段（Data）</li><li>BSS 段（未初始化數據）</li><li>堆（Heap）</li><li>棧（Stack）</li><li>共享庫</li></ul></li></ol><h3 id="6-4-內存管理單元-MMU"><a href="#6-4-內存管理單元-MMU" class="headerlink" title="6.4 內存管理單元 (MMU)"></a>6.4 內存管理單元 (MMU)</h3><ul><li>負責虛擬地址到物理地址的轉換</li><li>管理內存訪問權限（讀&#x2F;寫&#x2F;執行）</li><li>實現內存保護機制</li></ul><h3 id="6-5-內存分配和回收"><a href="#6-5-內存分配和回收" class="headerlink" title="6.5 內存分配和回收"></a>6.5 內存分配和回收</h3><ol><li><p>動態內存分配：</p><ul><li>堆內存由內存分配器管理（如 malloc&#x2F;free）</li><li>操作系統提供系統調用（如 brk, mmap）來擴展進程的內存</li></ul></li><li><p>垃圾回收：</p><ul><li>某些語言（如 Java, Python）使用垃圾回收機制自動管理內存</li></ul></li></ol><h3 id="6-6-特殊內存區域"><a href="#6-6-特殊內存區域" class="headerlink" title="6.6 特殊內存區域"></a>6.6 特殊內存區域</h3><ol><li><p>共享內存：</p><ul><li>允許多個進程訪問同一塊物理內存</li></ul></li><li><p>內存映射文件：</p><ul><li>將文件內容直接映射到進程的地址空間</li></ul></li></ol><h3 id="6-7-操作系統特定的結構"><a href="#6-7-操作系統特定的結構" class="headerlink" title="6.7 操作系統特定的結構"></a>6.7 操作系統特定的結構</h3><ol><li><p>Windows：</p><ul><li>進程環境塊（PEB）</li><li>線程環境塊（TEB）</li><li>內核對象</li></ul></li><li><p>Linux：</p><ul><li>任務結構（task_struct）</li><li>虛擬內存區域（vm_area_struct）</li><li>文件描述符表</li></ul></li></ol><h3 id="6-8-內存取證的意義"><a href="#6-8-內存取證的意義" class="headerlink" title="6.8 內存取證的意義"></a>6.8 內存取證的意義</h3><ol><li><p>揮發性數據：</p><ul><li>內存包含系統的當前運行狀態</li><li>可以捕獲到磁盤上看不到的信息</li></ul></li><li><p>隱藏信息：</p><ul><li>某些惡意軟件只在內存中運行，不寫入磁盤</li></ul></li><li><p>加密數據：</p><ul><li>內存中可能包含解密後的敏感數據</li></ul></li></ol><h3 id="6-9-Volatility-如何利用這些知識"><a href="#6-9-Volatility-如何利用這些知識" class="headerlink" title="6.9 Volatility 如何利用這些知識"></a>6.9 Volatility 如何利用這些知識</h3><ol><li><p>結構解析：</p><ul><li>利用操作系統特定的內存結構來定位和解析數據</li></ul></li><li><p>地址轉換：</p><ul><li>在虛擬地址和物理地址之間進行轉換</li></ul></li><li><p>進程重建：</p><ul><li>通過分析進程相關的內存結構來重建進程列表和信息</li></ul></li><li><p>文件恢復：</p><ul><li>從內存中提取文件內容和元數據</li></ul></li></ol><p>理解這些內存構造邏輯，有助於更深入地理解 Volatility 的工作原理，並能更有效地進行內存取證分析。</p><h2 id="7-用簡單的方式理解記憶體"><a href="#7-用簡單的方式理解記憶體" class="headerlink" title="7. 用簡單的方式理解記憶體"></a>7. 用簡單的方式理解記憶體</h2><p>想像電腦的記憶體就像一個巨大的圖書館。這個圖書館有很多特別之處,讓我們來看看:</p><h3 id="7-1-圖書館的結構"><a href="#7-1-圖書館的結構" class="headerlink" title="7.1 圖書館的結構"></a>7.1 圖書館的結構</h3><ol><li><p>書架 (物理內存):</p><ul><li>圖書館裡有很多書架,就像電腦裡有很多記憶體晶片。</li><li>每個書架都有自己的編號,就像記憶體的每個位置都有地址。</li></ul></li><li><p>圖書目錄 (虛擬內存):</p><ul><li>圖書館有一個神奇的目錄,可以讓你找到任何書,即使它們不在一起。</li><li>這就像電腦的虛擬內存,讓程序以為它有一大片連續的空間。</li></ul></li></ol><h3 id="7-2-圖書管理"><a href="#7-2-圖書管理" class="headerlink" title="7.2 圖書管理"></a>7.2 圖書管理</h3><ol><li><p>圖書分類 (內存分頁):</p><ul><li>書籍被分成小組,每組放在一個盒子裡。</li><li>這就像電腦把內存分成小塊(頁面),更容易管理。</li></ul></li><li><p>圖書管理員 (操作系統):</p><ul><li>管理員負責找書、放書,確保每個人都能用到需要的書。</li><li>操作系統就像這個管理員,管理所有的內存使用。</li></ul></li></ol><h3 id="7-3-閱讀區域"><a href="#7-3-閱讀區域" class="headerlink" title="7.3 閱讀區域"></a>7.3 閱讀區域</h3><ol><li><p>公共閱讀區 (用戶空間):</p><ul><li>這裡是人們看書的地方,就像程序運行的地方。</li></ul></li><li><p>員工專用區 (內核空間):</p><ul><li>只有圖書館員工才能進入的區域,像是電腦的核心系統運行的地方。</li></ul></li></ol><h3 id="7-4-借書和還書"><a href="#7-4-借書和還書" class="headerlink" title="7.4 借書和還書"></a>7.4 借書和還書</h3><ol><li><p>借書 (內存分配):</p><ul><li>當你需要一本書時,管理員會幫你找到並借給你。</li><li>程序需要內存時,操作系統就會分配給它。</li></ul></li><li><p>還書 (內存釋放):</p><ul><li>看完書後,你把書還回去,別人就能用了。</li><li>程序用完內存後,會還給系統,供其他程序使用。</li></ul></li></ol><h3 id="7-5-特別的書"><a href="#7-5-特別的書" class="headerlink" title="7.5 特別的書"></a>7.5 特別的書</h3><ol><li><p>共享的書 (共享內存):</p><ul><li>有些書可以同時被多人一起看。</li><li>這就像共享內存,多個程序可以同時使用。</li></ul></li><li><p>複印的書頁 (緩存):</p><ul><li>常用的書頁會被複印,放在容易拿到的地方。</li><li>這就像電腦的快取,把常用的數據放在快速存取的地方。</li></ul></li></ol><h3 id="7-6-Volatility-的工作"><a href="#7-6-Volatility-的工作" class="headerlink" title="7.6 Volatility 的工作"></a>7.6 Volatility 的工作</h3><p>想像 Volatility 是一個特別的圖書館調查員:</p><ul><li>它可以看到圖書館的每個角落。</li><li>它知道怎麼讀懂管理員的筆記和目錄。</li><li>它可以找出誰借了什麼書,甚至是已經還回去的書。</li><li>它能發現有人偷偷藏起來的書。</li></ul><p>這就是 Volatility 如何在電腦的記憶體中找到重要信息,即使這些信息看起來已經不在那裡了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>輪轉機 (Photos)</title>
      <link href="/2024/11/30/%E8%BC%AA%E8%BD%89%E6%A9%9F/"/>
      <url>/2024/11/30/%E8%BC%AA%E8%BD%89%E6%A9%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://iili.io/21nfjwX.jpg" alt="21nfjwX.jpg"><br><img src="https://iili.io/21nfX9I.jpg" alt="21nfX9I.jpg"><br><img src="https://iili.io/21nfwtn.jpg" alt="21nfwtn.jpg"><br><img src="https://iili.io/21nfhut.jpg" alt="21nfhut.jpg"><br><img src="https://iili.io/21nfr9S.jpg" alt="21nfr9S.jpg"><br><img src="https://iili.io/21nfUS2.jpg" alt="21nfUS2.jpg"><br><img src="https://iili.io/21nfScl.jpg" alt="21nfScl.jpg"><br><img src="https://iili.io/21nf4A7.jpg" alt="21nf4A7.jpg"><br><img src="https://iili.io/21nfQPj.jpg" alt="21nfQPj.jpg"><br><img src="https://iili.io/21nfLMb.jpg" alt="21nfLMb.jpg"><br><img src="https://iili.io/21nftKx.jpg" alt="21nftKx.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> photos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科盃 (Photos)</title>
      <link href="/2024/11/30/%E7%A7%91%E7%9B%83/"/>
      <url>/2024/11/30/%E7%A7%91%E7%9B%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://iili.io/21n33YP.jpg" alt="21n33YP.jpg"><br><img src="https://iili.io/21n323B.jpg" alt="21n323B.jpg"><br><img src="https://iili.io/21n3J4V.jpg" alt="21n3J4V.jpg"><br><img src="https://iili.io/21n3Fv1.jpg" alt="21n3Fv1.jpg"><br><img src="https://iili.io/21n3qTg.jpg" alt="21n3qTg.jpg"><br><img src="https://iili.io/21n3Bja.jpg" alt="21n3Bja.jpg"><br><img src="https://iili.io/21n3oCv.jpg" alt="21n3oCv.jpg"><br><img src="https://iili.io/21n3xGR.jpg" alt="21n3xGR.jpg"><br><img src="https://iili.io/21n3z4p.jpg" alt="21n3z4p.jpg"><br><img src="https://iili.io/21n3T3N.jpg" alt="21n3T3N.jpg"><br><img src="https://iili.io/21n3Avt.jpg" alt="21n3Avt.jpg"><br><img src="https://iili.io/21n3uaI.jpg" alt="21n3uaI.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> photos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NoHackNo CTF Writeup</title>
      <link href="/2024/11/30/HoHackNo-CTF-Writeup/"/>
      <url>/2024/11/30/HoHackNo-CTF-Writeup/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hackmd.io/@catlover/r1Xt4i9z1x">NoHackNo CTF Writeup(Hackmd)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>啦啦隊 (Photos)</title>
      <link href="/2024/11/30/%E5%95%A6%E5%95%A6%E9%9A%8A/"/>
      <url>/2024/11/30/%E5%95%A6%E5%95%A6%E9%9A%8A/</url>
      
        <content type="html"><![CDATA[<p><img src="https://iili.io/21n3DcN.jpg" alt="21n3DcN.jpg"><br><img src="https://iili.io/21n3bSI.jpg" alt="21n3bSI.jpg"><br><img src="https://iili.io/21n3p9t.jpg" alt="21n3p9t.jpg"><br><img src="https://iili.io/21n3tFp.jpg" alt="21n3tFp.jpg"><br><img src="https://iili.io/21nF9Nn.jpg" alt="21nF9Nn.jpg"><br><img src="https://iili.io/21nFHts.jpg" alt="21nFHts.jpg"><br><img src="https://iili.io/21nFdoG.jpg" alt="21nFdoG.jpg"><br><img src="https://iili.io/21nF2Vf.jpg" alt="21nF2Vf.jpg"><br><img src="https://iili.io/21nFKKl.jpg" alt="21nFKKl.jpg"><br><img src="https://iili.io/21nFqSS.jpg" alt="21nFqSS.jpg"><br><img src="https://iili.io/21nFfl2.jpg" alt="21nFfl2.jpg"><br><img src="https://iili.io/21nFoNe.jpg" alt="21nFoNe.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> photos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彰商(Photos)</title>
      <link href="/2024/11/30/%E5%BD%B0%E5%95%86/"/>
      <url>/2024/11/30/%E5%BD%B0%E5%95%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://iili.io/21nf3a2.jpg" alt="21nf3a2.jpg"><br><img src="https://iili.io/21nfJ44.jpg" alt="21nfJ44.jpg"><br><img src="https://iili.io/21nfHGf.jpg" alt="21nfHGf.jpg"><br><img src="https://iili.io/21nf23l.jpg" alt="21nf23l.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> photos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>運動會(Photos)</title>
      <link href="/2024/11/30/%E9%81%8B%E5%8B%95%E6%9C%83/"/>
      <url>/2024/11/30/%E9%81%8B%E5%8B%95%E6%9C%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://iili.io/21nKAIn.jpg" alt="21nKAIn.jpg"><br><img src="https://iili.io/21nKTmX.jpg" alt="21nKTmX.jpg"><br><img src="https://iili.io/21nK5LG.jpg" alt="21nK5LG.jpg"><br><img src="https://iili.io/21nKRXs.jpg" alt="21nKRXs.jpg"><br><img src="https://iili.io/21nKcrl.jpg" alt="21nKcrl.jpg"><br><img src="https://iili.io/21nK17S.jpg" alt="21nK17S.jpg"><br><img src="https://iili.io/21nKGp9.jpg" alt="21nKGp9.jpg"><br><img src="https://iili.io/21nKEk7.jpg" alt="21nKEk7.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> photos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Post</title>
      <link href="/2024/11/30/FirstPost/"/>
      <url>/2024/11/30/FirstPost/</url>
      
        <content type="html"><![CDATA[<p>HelloWorld</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
